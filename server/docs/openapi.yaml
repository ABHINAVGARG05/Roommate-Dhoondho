openapi: 3.0.0
info:
  title: Roommate-Dhoondho API
  version: 1.0.0
  description: API documentation for the Roommate-Dhoondho application
  contact:
    name: API Support
    email: support@roommate-dhoondho.com

servers:
  - url: /api/v1
    description: Base API URL

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    googleAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /auth/google
          tokenUrl: /auth/google/callback
          scopes:
            profile: Access user profile
            email: Access user email

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        profilePicture:
          type: string
        followers:
          type: array
          items:
            type: string
        following:
          type: array
          items:
            type: string

    Room:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        title:
          type: string
        description:
          type: string
        location:
          type: string
        price:
          type: number
        amenities:
          type: array
          items:
            type: string

    Roommate:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        preferences:
          type: object
        bio:
          type: string
        interests:
          type: array
          items:
            type: string

    Post:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        content:
          type: string
        likes:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time

    ServerMessage:
      type: object
      properties:
        urlParameter:
          type: string
        message:
          type: string
        createdAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                username:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input
        '429':
          description: Too many requests

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '429':
          description: Too many requests

  /auth/verify-email:
    post:
      summary: Verify user email
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid token
        '429':
          description: Too many requests

  /auth/resend-verify-email:
    post:
      summary: Resend verification email
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email sent
        '400':
          description: Invalid email
        '429':
          description: Too many requests

  /auth/password-reset:
    post:
      summary: Request password reset
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Invalid email
        '429':
          description: Too many requests

  /auth/update-password:
    post:
      summary: Update password
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid input
        '429':
          description: Too many requests

  /user/all:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests

  /user/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '429':
          description: Too many requests

    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '429':
          description: Too many requests

  /room/all:
    get:
      summary: Get all rooms
      tags:
        - Rooms
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '429':
          description: Too many requests

  /room/{userid}:
    post:
      summary: Create new room
      tags:
        - Rooms
      security:
        - bearerAuth: []
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Room created successfully
        '401':
          description: Unauthorized
        '429':
          description: Too many requests

  /roommate/all:
    get:
      summary: Get all roommates
      tags:
        - Roommates
      responses:
        '200':
          description: List of roommates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roommate'
        '429':
          description: Too many requests

  /roommate/{userid}:
    post:
      summary: Create new roommate profile
      tags:
        - Roommates
      security:
        - bearerAuth: []
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roommate'
      responses:
        '201':
          description: Roommate profile created successfully
        '401':
          description: Unauthorized
        '429':
          description: Too many requests

  /post:
    post:
      summary: Create new post
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
        '401':
          description: Unauthorized

  /post/{id}:
    get:
      summary: Get post by ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

  /servermsg/{urlParameter}:
    get:
      summary: Get server message
      tags:
        - Server Messages
      parameters:
        - name: urlParameter
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Server message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerMessage'
        '404':
          description: Message not found

    post:
      summary: Create server message
      tags:
        - Server Messages
      security:
        - bearerAuth: []
      parameters:
        - name: urlParameter
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerMessage'
      responses:
        '201':
          description: Message created successfully
        '401':
          description: Unauthorized 